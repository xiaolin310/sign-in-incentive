// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: api/signin/interface/v1/signin.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SingInInterfaceClient is the client API for SingInInterface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SingInInterfaceClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error)
	GetSignInInfo(ctx context.Context, in *GetSignInInfoRequest, opts ...grpc.CallOption) (*SignInInfoReply, error)
	SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInInfoReply, error)
}

type singInInterfaceClient struct {
	cc grpc.ClientConnInterface
}

func NewSingInInterfaceClient(cc grpc.ClientConnInterface) SingInInterfaceClient {
	return &singInInterfaceClient{cc}
}

func (c *singInInterfaceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error) {
	out := new(RegisterReply)
	err := c.cc.Invoke(ctx, "/api.signin.interface.v1.SingInInterface/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *singInInterfaceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, "/api.signin.interface.v1.SingInInterface/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *singInInterfaceClient) GetSignInInfo(ctx context.Context, in *GetSignInInfoRequest, opts ...grpc.CallOption) (*SignInInfoReply, error) {
	out := new(SignInInfoReply)
	err := c.cc.Invoke(ctx, "/api.signin.interface.v1.SingInInterface/GetSignInInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *singInInterfaceClient) SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInInfoReply, error) {
	out := new(SignInInfoReply)
	err := c.cc.Invoke(ctx, "/api.signin.interface.v1.SingInInterface/SignIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SingInInterfaceServer is the server API for SingInInterface service.
// All implementations must embed UnimplementedSingInInterfaceServer
// for forward compatibility
type SingInInterfaceServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterReply, error)
	Login(context.Context, *LoginRequest) (*LoginReply, error)
	GetSignInInfo(context.Context, *GetSignInInfoRequest) (*SignInInfoReply, error)
	SignIn(context.Context, *SignInRequest) (*SignInInfoReply, error)
	mustEmbedUnimplementedSingInInterfaceServer()
}

// UnimplementedSingInInterfaceServer must be embedded to have forward compatible implementations.
type UnimplementedSingInInterfaceServer struct {
}

func (UnimplementedSingInInterfaceServer) Register(context.Context, *RegisterRequest) (*RegisterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedSingInInterfaceServer) Login(context.Context, *LoginRequest) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedSingInInterfaceServer) GetSignInInfo(context.Context, *GetSignInInfoRequest) (*SignInInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSignInInfo not implemented")
}
func (UnimplementedSingInInterfaceServer) SignIn(context.Context, *SignInRequest) (*SignInInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignIn not implemented")
}
func (UnimplementedSingInInterfaceServer) mustEmbedUnimplementedSingInInterfaceServer() {}

// UnsafeSingInInterfaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SingInInterfaceServer will
// result in compilation errors.
type UnsafeSingInInterfaceServer interface {
	mustEmbedUnimplementedSingInInterfaceServer()
}

func RegisterSingInInterfaceServer(s grpc.ServiceRegistrar, srv SingInInterfaceServer) {
	s.RegisterService(&SingInInterface_ServiceDesc, srv)
}

func _SingInInterface_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SingInInterfaceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.signin.interface.v1.SingInInterface/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SingInInterfaceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SingInInterface_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SingInInterfaceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.signin.interface.v1.SingInInterface/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SingInInterfaceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SingInInterface_GetSignInInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSignInInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SingInInterfaceServer).GetSignInInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.signin.interface.v1.SingInInterface/GetSignInInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SingInInterfaceServer).GetSignInInfo(ctx, req.(*GetSignInInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SingInInterface_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SingInInterfaceServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.signin.interface.v1.SingInInterface/SignIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SingInInterfaceServer).SignIn(ctx, req.(*SignInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SingInInterface_ServiceDesc is the grpc.ServiceDesc for SingInInterface service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SingInInterface_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.signin.interface.v1.SingInInterface",
	HandlerType: (*SingInInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _SingInInterface_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _SingInInterface_Login_Handler,
		},
		{
			MethodName: "GetSignInInfo",
			Handler:    _SingInInterface_GetSignInInfo_Handler,
		},
		{
			MethodName: "SignIn",
			Handler:    _SingInInterface_SignIn_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/signin/interface/v1/signin.proto",
}
