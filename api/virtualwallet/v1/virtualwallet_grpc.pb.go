// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: api/virtualwallet/v1/virtualwallet.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VirtualWalletClient is the client API for VirtualWallet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VirtualWalletClient interface {
	GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceReply, error)
	Debit(ctx context.Context, in *DebitRequest, opts ...grpc.CallOption) (*DebitReply, error)
	Credit(ctx context.Context, in *CreditRequest, opts ...grpc.CallOption) (*CreditReply, error)
}

type virtualWalletClient struct {
	cc grpc.ClientConnInterface
}

func NewVirtualWalletClient(cc grpc.ClientConnInterface) VirtualWalletClient {
	return &virtualWalletClient{cc}
}

func (c *virtualWalletClient) GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceReply, error) {
	out := new(GetBalanceReply)
	err := c.cc.Invoke(ctx, "/api.virtualwallet.v1.VirtualWallet/GetBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualWalletClient) Debit(ctx context.Context, in *DebitRequest, opts ...grpc.CallOption) (*DebitReply, error) {
	out := new(DebitReply)
	err := c.cc.Invoke(ctx, "/api.virtualwallet.v1.VirtualWallet/Debit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualWalletClient) Credit(ctx context.Context, in *CreditRequest, opts ...grpc.CallOption) (*CreditReply, error) {
	out := new(CreditReply)
	err := c.cc.Invoke(ctx, "/api.virtualwallet.v1.VirtualWallet/Credit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VirtualWalletServer is the server API for VirtualWallet service.
// All implementations must embed UnimplementedVirtualWalletServer
// for forward compatibility
type VirtualWalletServer interface {
	GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceReply, error)
	Debit(context.Context, *DebitRequest) (*DebitReply, error)
	Credit(context.Context, *CreditRequest) (*CreditReply, error)
	mustEmbedUnimplementedVirtualWalletServer()
}

// UnimplementedVirtualWalletServer must be embedded to have forward compatible implementations.
type UnimplementedVirtualWalletServer struct {
}

func (UnimplementedVirtualWalletServer) GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedVirtualWalletServer) Debit(context.Context, *DebitRequest) (*DebitReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Debit not implemented")
}
func (UnimplementedVirtualWalletServer) Credit(context.Context, *CreditRequest) (*CreditReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Credit not implemented")
}
func (UnimplementedVirtualWalletServer) mustEmbedUnimplementedVirtualWalletServer() {}

// UnsafeVirtualWalletServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VirtualWalletServer will
// result in compilation errors.
type UnsafeVirtualWalletServer interface {
	mustEmbedUnimplementedVirtualWalletServer()
}

func RegisterVirtualWalletServer(s grpc.ServiceRegistrar, srv VirtualWalletServer) {
	s.RegisterService(&VirtualWallet_ServiceDesc, srv)
}

func _VirtualWallet_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualWalletServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.virtualwallet.v1.VirtualWallet/GetBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualWalletServer).GetBalance(ctx, req.(*GetBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualWallet_Debit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DebitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualWalletServer).Debit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.virtualwallet.v1.VirtualWallet/Debit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualWalletServer).Debit(ctx, req.(*DebitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualWallet_Credit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualWalletServer).Credit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.virtualwallet.v1.VirtualWallet/Credit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualWalletServer).Credit(ctx, req.(*CreditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VirtualWallet_ServiceDesc is the grpc.ServiceDesc for VirtualWallet service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VirtualWallet_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.virtualwallet.v1.VirtualWallet",
	HandlerType: (*VirtualWalletServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBalance",
			Handler:    _VirtualWallet_GetBalance_Handler,
		},
		{
			MethodName: "Debit",
			Handler:    _VirtualWallet_Debit_Handler,
		},
		{
			MethodName: "Credit",
			Handler:    _VirtualWallet_Credit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/virtualwallet/v1/virtualwallet.proto",
}
