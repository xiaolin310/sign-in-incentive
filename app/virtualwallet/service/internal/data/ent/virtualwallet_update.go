// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sign-in/app/virtualwallet/service/internal/data/ent/predicate"
	"sign-in/app/virtualwallet/service/internal/data/ent/virtualwallet"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VirtualWalletUpdate is the builder for updating VirtualWallet entities.
type VirtualWalletUpdate struct {
	config
	hooks    []Hook
	mutation *VirtualWalletMutation
}

// Where appends a list predicates to the VirtualWalletUpdate builder.
func (vwu *VirtualWalletUpdate) Where(ps ...predicate.VirtualWallet) *VirtualWalletUpdate {
	vwu.mutation.Where(ps...)
	return vwu
}

// SetUserID sets the "user_id" field.
func (vwu *VirtualWalletUpdate) SetUserID(i int64) *VirtualWalletUpdate {
	vwu.mutation.ResetUserID()
	vwu.mutation.SetUserID(i)
	return vwu
}

// AddUserID adds i to the "user_id" field.
func (vwu *VirtualWalletUpdate) AddUserID(i int64) *VirtualWalletUpdate {
	vwu.mutation.AddUserID(i)
	return vwu
}

// SetBalance sets the "balance" field.
func (vwu *VirtualWalletUpdate) SetBalance(f float64) *VirtualWalletUpdate {
	vwu.mutation.ResetBalance()
	vwu.mutation.SetBalance(f)
	return vwu
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (vwu *VirtualWalletUpdate) SetNillableBalance(f *float64) *VirtualWalletUpdate {
	if f != nil {
		vwu.SetBalance(*f)
	}
	return vwu
}

// AddBalance adds f to the "balance" field.
func (vwu *VirtualWalletUpdate) AddBalance(f float64) *VirtualWalletUpdate {
	vwu.mutation.AddBalance(f)
	return vwu
}

// SetCreatedAt sets the "created_at" field.
func (vwu *VirtualWalletUpdate) SetCreatedAt(t time.Time) *VirtualWalletUpdate {
	vwu.mutation.SetCreatedAt(t)
	return vwu
}

// SetUpdatedAt sets the "updated_at" field.
func (vwu *VirtualWalletUpdate) SetUpdatedAt(t time.Time) *VirtualWalletUpdate {
	vwu.mutation.SetUpdatedAt(t)
	return vwu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (vwu *VirtualWalletUpdate) SetNillableUpdatedAt(t *time.Time) *VirtualWalletUpdate {
	if t != nil {
		vwu.SetUpdatedAt(*t)
	}
	return vwu
}

// Mutation returns the VirtualWalletMutation object of the builder.
func (vwu *VirtualWalletUpdate) Mutation() *VirtualWalletMutation {
	return vwu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vwu *VirtualWalletUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(vwu.hooks) == 0 {
		affected, err = vwu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VirtualWalletMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			vwu.mutation = mutation
			affected, err = vwu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(vwu.hooks) - 1; i >= 0; i-- {
			if vwu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = vwu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vwu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (vwu *VirtualWalletUpdate) SaveX(ctx context.Context) int {
	affected, err := vwu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vwu *VirtualWalletUpdate) Exec(ctx context.Context) error {
	_, err := vwu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vwu *VirtualWalletUpdate) ExecX(ctx context.Context) {
	if err := vwu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vwu *VirtualWalletUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   virtualwallet.Table,
			Columns: virtualwallet.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: virtualwallet.FieldID,
			},
		},
	}
	if ps := vwu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vwu.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: virtualwallet.FieldUserID,
		})
	}
	if value, ok := vwu.mutation.AddedUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: virtualwallet.FieldUserID,
		})
	}
	if value, ok := vwu.mutation.Balance(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: virtualwallet.FieldBalance,
		})
	}
	if value, ok := vwu.mutation.AddedBalance(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: virtualwallet.FieldBalance,
		})
	}
	if value, ok := vwu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: virtualwallet.FieldCreatedAt,
		})
	}
	if value, ok := vwu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: virtualwallet.FieldUpdatedAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vwu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{virtualwallet.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// VirtualWalletUpdateOne is the builder for updating a single VirtualWallet entity.
type VirtualWalletUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VirtualWalletMutation
}

// SetUserID sets the "user_id" field.
func (vwuo *VirtualWalletUpdateOne) SetUserID(i int64) *VirtualWalletUpdateOne {
	vwuo.mutation.ResetUserID()
	vwuo.mutation.SetUserID(i)
	return vwuo
}

// AddUserID adds i to the "user_id" field.
func (vwuo *VirtualWalletUpdateOne) AddUserID(i int64) *VirtualWalletUpdateOne {
	vwuo.mutation.AddUserID(i)
	return vwuo
}

// SetBalance sets the "balance" field.
func (vwuo *VirtualWalletUpdateOne) SetBalance(f float64) *VirtualWalletUpdateOne {
	vwuo.mutation.ResetBalance()
	vwuo.mutation.SetBalance(f)
	return vwuo
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (vwuo *VirtualWalletUpdateOne) SetNillableBalance(f *float64) *VirtualWalletUpdateOne {
	if f != nil {
		vwuo.SetBalance(*f)
	}
	return vwuo
}

// AddBalance adds f to the "balance" field.
func (vwuo *VirtualWalletUpdateOne) AddBalance(f float64) *VirtualWalletUpdateOne {
	vwuo.mutation.AddBalance(f)
	return vwuo
}

// SetCreatedAt sets the "created_at" field.
func (vwuo *VirtualWalletUpdateOne) SetCreatedAt(t time.Time) *VirtualWalletUpdateOne {
	vwuo.mutation.SetCreatedAt(t)
	return vwuo
}

// SetUpdatedAt sets the "updated_at" field.
func (vwuo *VirtualWalletUpdateOne) SetUpdatedAt(t time.Time) *VirtualWalletUpdateOne {
	vwuo.mutation.SetUpdatedAt(t)
	return vwuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (vwuo *VirtualWalletUpdateOne) SetNillableUpdatedAt(t *time.Time) *VirtualWalletUpdateOne {
	if t != nil {
		vwuo.SetUpdatedAt(*t)
	}
	return vwuo
}

// Mutation returns the VirtualWalletMutation object of the builder.
func (vwuo *VirtualWalletUpdateOne) Mutation() *VirtualWalletMutation {
	return vwuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vwuo *VirtualWalletUpdateOne) Select(field string, fields ...string) *VirtualWalletUpdateOne {
	vwuo.fields = append([]string{field}, fields...)
	return vwuo
}

// Save executes the query and returns the updated VirtualWallet entity.
func (vwuo *VirtualWalletUpdateOne) Save(ctx context.Context) (*VirtualWallet, error) {
	var (
		err  error
		node *VirtualWallet
	)
	if len(vwuo.hooks) == 0 {
		node, err = vwuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VirtualWalletMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			vwuo.mutation = mutation
			node, err = vwuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(vwuo.hooks) - 1; i >= 0; i-- {
			if vwuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = vwuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vwuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (vwuo *VirtualWalletUpdateOne) SaveX(ctx context.Context) *VirtualWallet {
	node, err := vwuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vwuo *VirtualWalletUpdateOne) Exec(ctx context.Context) error {
	_, err := vwuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vwuo *VirtualWalletUpdateOne) ExecX(ctx context.Context) {
	if err := vwuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vwuo *VirtualWalletUpdateOne) sqlSave(ctx context.Context) (_node *VirtualWallet, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   virtualwallet.Table,
			Columns: virtualwallet.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: virtualwallet.FieldID,
			},
		},
	}
	id, ok := vwuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "VirtualWallet.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vwuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, virtualwallet.FieldID)
		for _, f := range fields {
			if !virtualwallet.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != virtualwallet.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vwuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vwuo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: virtualwallet.FieldUserID,
		})
	}
	if value, ok := vwuo.mutation.AddedUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: virtualwallet.FieldUserID,
		})
	}
	if value, ok := vwuo.mutation.Balance(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: virtualwallet.FieldBalance,
		})
	}
	if value, ok := vwuo.mutation.AddedBalance(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: virtualwallet.FieldBalance,
		})
	}
	if value, ok := vwuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: virtualwallet.FieldCreatedAt,
		})
	}
	if value, ok := vwuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: virtualwallet.FieldUpdatedAt,
		})
	}
	_node = &VirtualWallet{config: vwuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vwuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{virtualwallet.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
