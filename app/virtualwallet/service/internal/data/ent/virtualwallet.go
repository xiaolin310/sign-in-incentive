// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"sign-in/app/virtualwallet/service/internal/data/ent/virtualwallet"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// VirtualWallet is the model entity for the VirtualWallet schema.
type VirtualWallet struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int64 `json:"user_id,omitempty"`
	// Balance holds the value of the "balance" field.
	Balance float64 `json:"balance,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*VirtualWallet) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case virtualwallet.FieldBalance:
			values[i] = new(sql.NullFloat64)
		case virtualwallet.FieldUserID:
			values[i] = new(sql.NullInt64)
		case virtualwallet.FieldCreatedAt, virtualwallet.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case virtualwallet.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type VirtualWallet", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the VirtualWallet fields.
func (vw *VirtualWallet) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case virtualwallet.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				vw.ID = *value
			}
		case virtualwallet.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				vw.UserID = value.Int64
			}
		case virtualwallet.FieldBalance:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field balance", values[i])
			} else if value.Valid {
				vw.Balance = value.Float64
			}
		case virtualwallet.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				vw.CreatedAt = value.Time
			}
		case virtualwallet.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				vw.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this VirtualWallet.
// Note that you need to call VirtualWallet.Unwrap() before calling this method if this VirtualWallet
// was returned from a transaction, and the transaction was committed or rolled back.
func (vw *VirtualWallet) Update() *VirtualWalletUpdateOne {
	return (&VirtualWalletClient{config: vw.config}).UpdateOne(vw)
}

// Unwrap unwraps the VirtualWallet entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (vw *VirtualWallet) Unwrap() *VirtualWallet {
	tx, ok := vw.config.driver.(*txDriver)
	if !ok {
		panic("ent: VirtualWallet is not a transactional entity")
	}
	vw.config.driver = tx.drv
	return vw
}

// String implements the fmt.Stringer.
func (vw *VirtualWallet) String() string {
	var builder strings.Builder
	builder.WriteString("VirtualWallet(")
	builder.WriteString(fmt.Sprintf("id=%v", vw.ID))
	builder.WriteString(", user_id=")
	builder.WriteString(fmt.Sprintf("%v", vw.UserID))
	builder.WriteString(", balance=")
	builder.WriteString(fmt.Sprintf("%v", vw.Balance))
	builder.WriteString(", created_at=")
	builder.WriteString(vw.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(vw.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// VirtualWallets is a parsable slice of VirtualWallet.
type VirtualWallets []*VirtualWallet

func (vw VirtualWallets) config(cfg config) {
	for _i := range vw {
		vw[_i].config = cfg
	}
}
